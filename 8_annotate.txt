[a57816@compute-431-1 ESC_FLAME_GRAPH]$ perf annotate --stdio --dsos=naive --symbol=multiply_matrices

Percent |	Source code & Disassembly of naive for cpu-clock
----------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000400810 <multiply_matrices>:
         :	multiply_matrices():
         :	                }
         :	        }
         :	}
         :
         :	void multiply_matrices()
         :	{
    0.00 :	  400810:       pxor   %xmm2,%xmm2
    0.00 :	  400814:       mov    $0x7e97c0,%edi
    0.00 :	  400819:       mov    %rdi,%r8
    0.00 :	  40081c:       xor    %esi,%esi
    0.00 :	  40081e:       sub    $0x7e97c0,%r8
    0.00 :	  400825:       nopl   (%rax)
    0.13 :	  400828:       lea    0x6f5580(%rsi),%rax
    0.00 :	  40082f:       lea    0x7e97c0(%rsi),%rcx
    0.00 :	  400836:       mov    %rdi,%rdx
    0.00 :	  400839:       movaps %xmm2,%xmm1
    0.00 :	  40083c:       nopl   0x0(%rax)
         :
         :	        for (i = 0 ; i < MSIZE ; i++) {
         :	                for (j = 0 ; j < MSIZE ; j++) {
         :	                        float sum = 0.0 ;
         :	                        for (k = 0 ; k < MSIZE ; k++) {
         :	                                sum = sum + (matrix_a[i][k] * matrix_b[k][j]) ;
   24.97 :	  400840:       movss  (%rdx),%xmm0
    0.00 :	  400844:       add    $0x7d0,%rax
    0.00 :	  40084a:       mulss  -0x7d0(%rax),%xmm0
   18.56 :	  400852:       add    $0x4,%rdx
         :	        int i, j, k ;
         :
         :	        for (i = 0 ; i < MSIZE ; i++) {
         :	                for (j = 0 ; j < MSIZE ; j++) {
         :	                        float sum = 0.0 ;
         :	                        for (k = 0 ; k < MSIZE ; k++) {
   22.35 :	  400856:       cmp    %rcx,%rax
         :	                                sum = sum + (matrix_a[i][k] * matrix_b[k][j]) ;
    0.00 :	  400859:       addss  %xmm0,%xmm1
         :	        int i, j, k ;
         :
         :	        for (i = 0 ; i < MSIZE ; i++) {
         :	                for (j = 0 ; j < MSIZE ; j++) {
         :	                        float sum = 0.0 ;
         :	                        for (k = 0 ; k < MSIZE ; k++) {
   33.86 :	  40085d:       jne    400840 <multiply_matrices+0x30>
         :	                                sum = sum + (matrix_a[i][k] * matrix_b[k][j]) ;
         :	                        }
         :	                        matrix_r[i][j] = sum ;
    0.00 :	  40085f:       movss  %xmm1,0x601340(%r8,%rsi,1)
    0.13 :	  400869:       add    $0x4,%rsi
         :	void multiply_matrices()
         :	{
         :	        int i, j, k ;
         :
         :	        for (i = 0 ; i < MSIZE ; i++) {
         :	                for (j = 0 ; j < MSIZE ; j++) {
    0.00 :	  40086d:       cmp    $0x7d0,%rsi
    0.00 :	  400874:       jne    400828 <multiply_matrices+0x18>
    0.00 :	  400876:       add    $0x7d0,%rdi
         :
         :	void multiply_matrices()
         :	{
         :	        int i, j, k ;
         :
         :	        for (i = 0 ; i < MSIZE ; i++) {
    0.00 :	  40087d:       cmp    $0x8dda00,%rdi
    0.00 :	  400884:       jne    400819 <multiply_matrices+0x9>
    0.00 :	  400886:       repz retq 
